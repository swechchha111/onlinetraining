class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
//          vector<vector<int> > res;
        
//         if (num.empty())
//             return res;
//         int n = num.size(); 
//         sort(num.begin(),num.end());
    
//         for (int i = 0; i < n; i++) {
        
//             int target_3 = target - num[i];
        
//             for (int j = i + 1; j < n; j++) {
            
//                 int target_2 = target_3 - num[j];
            
//                 int front = j + 1;
//                 int back = n - 1;
            
//                 while(front < back) {
                
//                     int two_sum = num[front] + num[back];
                
//                     if (two_sum < target_2) front++;
                
//                     else if (two_sum > target_2) back--;
                
//                     else {
                    
//                         vector<int> quadruplet(4, 0);
//                         quadruplet[0] = num[i];
//                         quadruplet[1] = num[j];
//                         quadruplet[2] = num[front];
//                         quadruplet[3] = num[back];
//                         res.push_back(quadruplet);
                    
//                         // Processing the duplicates of number 3
//                         while (front < back && num[front] == quadruplet[2]) ++front;
                    
//                         // Processing the duplicates of number 4
//                         while (front < back && num[back] == quadruplet[3]) --back;
                
//                     }
//                 }
                
//                 // Processing the duplicates of number 2
//                 while(j + 1 < n && num[j + 1] == num[j]) ++j;
//             }
        
//             // Processing the duplicates of number 1
//             while (i + 1 < n && num[i + 1] == num[i]) ++i;
        
//         }
    
//         return res;
       vector<vector<int>> ans;
        sort(nums.begin(), nums.end());
    
        int n=nums.size();
        for(int i=0;i<n;i++)
        {  int target1=target-nums[i];
            for(int j=i+1;j<n;j++)
            {int target2=target1-nums[j];
             int  low=j+1;
             int high=n-1;
             while(low<high)
             {int ts=nums[low]+nums[high];
                 if(ts>target2)
                     high--;
                 else if(ts<target2)
                     low++;
                 else
                 {
                    vector<int> res(4, 0);
                        res[0] = nums[i];
                        res[1] = nums[j];
                        res[2] = nums[low];
                        res[3] = nums[high];
                        ans.push_back(res);
                 
                 while(low<high && low==res[2])low++;
                 while(low<high && high==res[3])high--;}
             }
             while(j+1<n && nums[j+1]==nums[j])j++;
             
                
                
                
            }
          while(i+1<n && nums[i+1]==nums[i])i++;
        }
       
        return ans;
    }
};
