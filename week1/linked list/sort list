/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* a, ListNode* b)
    { ListNode* dummy=new ListNode(1);
     ListNode* temp=dummy;
        while(a && b)
        { if(a->val>b->val)
        {
            temp->next=b;
            b=b->next;
            temp=temp->next;
        }
         else
        {
            temp->next=a;
            a=a->next;
            temp=temp->next;
        }
         
            
        }
    temp->next= (a==NULL)? b : a;
     return dummy->next;
    }
    ListNode* middle(ListNode* head)
    {  ListNode* slow=head;
     ListNode* fast=head;
     while(fast->next && fast->next->next)
     {
         slow=slow->next;
         fast=fast->next->next;
     }
     ListNode *t=slow->next;
     slow->next=NULL;
     return t;
     
        
    }
    ListNode* sortList(ListNode* head) {
        if(!head || !head->next)return head;
        ListNode* mid=middle(head);
        ListNode* left=sortList(head);
        ListNode* right=sortList(mid);
        return merge(left, right);
    }
};
